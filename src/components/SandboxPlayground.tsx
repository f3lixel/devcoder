'use client';

import {
  SandboxProvider,
  SandboxLayout,
  SandboxTabs,
  SandboxTabsList,
  SandboxTabsTrigger,
  SandboxTabsContent,
  CodiconFileExplorer,
  SandboxCodeEditor,
  SandboxPreview,
  SandboxConsole,
} from '@/components/ui/shadcn-io/sandbox/index';
import TerminalPane from '@/components/TerminalPane'
import type { SandpackProviderProps } from '@codesandbox/sandpack-react';
import { useMemo, useCallback } from 'react';
import { PanelGroup, Panel, PanelResizeHandle } from 'react-resizable-panels';

interface SandboxPlaygroundProps {
  files: SandpackProviderProps['files'];
  onFilesChange: (path: string, code: string) => void;
  onFileSelect?: (path: string) => void;
  activeFile?: string;
}

export default function SandboxPlayground({ 
  files, 
  onFilesChange, 
  onFileSelect,
  activeFile
}: SandboxPlaygroundProps) {

  const normalizedFiles = useMemo(() => {
    const next: SandpackProviderProps['files'] = { ...files };
    if ((next as any)['/package.js']) {
      (next as any)['/package.json'] = (next as any)['/package.js'];
      delete (next as any)['/package.js'];
    }
    // Ensure missing CSS import used by Header resolves to a real file
    const headerFile = (next as any)['/src/components/Header.tsx'];
    const headerCode = typeof headerFile === 'string' ? headerFile : headerFile?.code;
    if (typeof headerCode === 'string' && headerCode.includes("import './styles/components/Header.css'")) {
      const cssPath = '/src/components/styles/components/Header.css';
      if (!(next as any)[cssPath]) {
        (next as any)[cssPath] = '/* autogenerated placeholder: Header styles */\n.header{ display: contents; }\n';
      }
    }

    // Generic: auto-create placeholders for missing relative imports
    const pathJoin = (baseDir: string, rel: string) => {
      const parts = (baseDir + '/' + rel).split('/')
        .filter(Boolean);
      const stack: string[] = [];
      for (const part of parts) {
        if (part === '.') continue;
        if (part === '..') { stack.pop(); continue; }
        stack.push(part);
      }
      return '/' + stack.join('/');
    };

    const candidatesFor = (p: string) => {
      // If path already has extension, try exact and index fallback
      const hasExt = /\.[a-zA-Z0-9]+$/.test(p);
      const list: string[] = [];
      if (hasExt) {
        list.push(p);
      } else {
        list.push(p + '.tsx', p + '.ts', p + '.jsx', p + '.js', p + '.css');
        list.push(p + '/index.tsx', p + '/index.ts', p + '/index.jsx', p + '/index.js');
      }
      return list;
    };

    const ensureFile = (fullPath: string) => {
      if ((next as any)[fullPath]) return;
      if (fullPath.endsWith('.css')) {
        (next as any)[fullPath] = '/* autogenerated placeholder */\n';
        return;
      }
      if (fullPath.endsWith('.tsx') || fullPath.endsWith('.jsx')) {
        (next as any)[fullPath] = "import React from 'react'\nexport default function Placeholder(){ return null }\n";
        return;
      }
      if (fullPath.endsWith('.ts')) {
        (next as any)[fullPath] = 'export {}\n';
        return;
      }
      if (fullPath.endsWith('.js')) {
        (next as any)[fullPath] = 'export default {}\n';
        return;
      }
    };

    const importRegex = /import\s+(?:[^'";]+\s+from\s+)?['\"]([^'\"]+)['\"];?|require\(\s*['\"]([^'\"]+)['\"]\s*\)/g;
    Object.entries(next).forEach(([filePath, fileContent]) => {
      const code = typeof fileContent === 'string' ? fileContent : (fileContent as any)?.code;
      if (typeof code !== 'string') return;
      if (!/\.(tsx|ts|jsx|js)$/.test(filePath)) return;
      const baseDir = filePath.split('/').slice(0, -1).join('/') || '/';
      let m: RegExpExecArray | null;
      while ((m = importRegex.exec(code))) {
        const rel = (m[1] || m[2]) as string | undefined;
        if (!rel || !(rel.startsWith('./') || rel.startsWith('../'))) continue;
        const absBase = baseDir === '/' ? '' : baseDir;
        const targetBase = pathJoin(absBase, rel);
        const options = candidatesFor(targetBase);
        const exists = options.find((opt) => (next as any)[opt]);
        if (!exists && options.length > 0) {
          ensureFile(options[0]);
        }
      }
    });
    return next;
  }, [files]);

  const handleCodeUpdate = useCallback((path: string, code: string) => {
    const nextPath = path === '/package.js' ? '/package.json' : path;
    onFilesChange(nextPath, code);
  }, [onFilesChange]);

  // Notify parent when a file is selected in the editor
  const handleFileOpen = useCallback((path: string) => {
    if (onFileSelect) {
      onFileSelect(path);
    }
  }, [onFileSelect]);

  return (
    <div className="h-full w-full">
      <SandboxProvider
        template="react"
        files={normalizedFiles}
        options={{
          activeFile: activeFile || '/App.js',
          recompileMode: 'immediate',
          recompileDelay: 0,
          autorun: true,
        }}
        theme="dark"
      >
        <SandboxTabs defaultValue="preview" className="h-full">
          <SandboxTabsList>
            <SandboxTabsTrigger value="preview">Preview</SandboxTabsTrigger>
            <SandboxTabsTrigger value="code">Code</SandboxTabsTrigger>
            <SandboxTabsTrigger value="console">Console</SandboxTabsTrigger>
          </SandboxTabsList>
          <SandboxLayout>
            <SandboxTabsContent value="preview">
              <SandboxPreview />
            </SandboxTabsContent>
            <SandboxTabsContent value="code">
              <PanelGroup direction="horizontal" className="h-full">
                <Panel defaultSize={25} minSize={15} className="h-full">
                  <CodiconFileExplorer />
                </Panel>
                <PanelResizeHandle className="w-1 bg-border data-[resize-handle-active]:bg-primary cursor-col-resize" />
                <Panel minSize={25} className="h-full">
                  <PanelGroup direction="vertical" className="h-full">
                    <Panel defaultSize={70} minSize={30} className="h-full">
                      <SandboxCodeEditor showTabs />
                    </Panel>
                    <PanelResizeHandle className="h-1 bg-border data-[resize-handle-active]:bg-primary cursor-row-resize" />
                    <Panel minSize={20} className="h-full glass-panel rounded-md relative">
                      <TerminalPane
                        className="h-full"
                        listFiles={() => Object.keys(normalizedFiles).map((p) => ({ path: p }))}
                        readFile={(path) => {
                          const entry = (normalizedFiles as any)[path]
                          if (!entry) return undefined
                          return typeof entry === 'string' ? entry : entry.code
                        }}
                        writeFile={(path, content) => {
                          onFilesChange(path, content)
                          handleFileOpen(path)
                        }}
                        onOpenFile={(path) => {
                          handleFileOpen(path)
                        }}
                      />
                    </Panel>
                  </PanelGroup>
                </Panel>
              </PanelGroup>
            </SandboxTabsContent>
            <SandboxTabsContent value="console">
              <SandboxConsole />
            </SandboxTabsContent>
          </SandboxLayout>
        </SandboxTabs>
      </SandboxProvider>
    </div>
  );
}
