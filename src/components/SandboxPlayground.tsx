'use client';

import {
  SandboxProvider,
  SandboxLayout,
  SandboxTabs,
  SandboxTabsTrigger,
  SandboxTabsContent,
  CodiconFileExplorer,
  SandboxCodeEditor,
  SandboxPreview,
} from '@/components/ui/shadcn-io/sandbox/index';
import TerminalPane from '@/components/TerminalPane'
import type { SandpackProviderProps } from '@codesandbox/sandpack-react';
import { useMemo, useCallback } from 'react';
import { PanelGroup, Panel, PanelResizeHandle } from 'react-resizable-panels';
import { useState, useEffect } from 'react';
import { Loader } from '@/components/ai-elements/loader';
import type { SandpackTheme } from '@codesandbox/sandpack-react';
import { ChevronLeft, ChevronRight, Code2, Monitor, ExternalLink, RotateCcw, Maximize2, MoreVertical } from 'lucide-react';

interface SandboxPlaygroundProps {
  files: SandpackProviderProps['files'];
  onFilesChange: (path: string, code: string) => void;
  onFileSelect?: (path: string) => void;
  activeFile?: string;
}

export default function SandboxPlayground({ 
  files, 
  onFilesChange, 
  onFileSelect,
  activeFile
}: SandboxPlaygroundProps) {
  const [previewReady, setPreviewReady] = useState<boolean>(false);

  // Mark preview as ready after first mount tick to avoid SSR flash; in real use, wire to sandpack onLoad
  useEffect(() => {
    const t = setTimeout(() => setPreviewReady(true), 150);
    return () => clearTimeout(t);
  }, []);

  // Custom editor theme to match the screenshot vibe
  const editorTheme: SandpackTheme = {
    colors: {
      surface1: '#0f1115',
      surface2: '#0c0e13',
      surface3: '#0c0e13',
      clickable: '#9aa4b2',
      base: '#e5e7eb',
      disabled: '#3b3f46',
      hover: '#1a1f2a',
      accent: '#2dd4bf',
      error: '#ef4444',
      errorSurface: '#1f0d12',
    },
    fonts: {
      body: 'var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Consolas, monospace',
      mono: 'var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Consolas, monospace',
      size: '13px',
      lineHeight: '1.6',
    },
    syntax: {
      plain: '#e5e7eb',
      comment: { color: '#6b7280', fontStyle: 'italic' },
      keyword: '#c084fc',
      tag: '#f472b6',
      punctuation: '#9aa4b2',
      definition: '#93c5fd',
      property: '#34d399',
      static: '#f59e0b',
      string: '#facc15',
    },
  };

  const normalizedFiles = useMemo(() => {
    const next: SandpackProviderProps['files'] = { ...files };
    if ((next as any)['/package.js']) {
      (next as any)['/package.json'] = (next as any)['/package.js'];
      delete (next as any)['/package.js'];
    }
    // Ensure missing CSS import used by Header resolves to a real file
    const headerFile = (next as any)['/src/components/Header.tsx'];
    const headerCode = typeof headerFile === 'string' ? headerFile : headerFile?.code;
    if (typeof headerCode === 'string' && headerCode.includes("import './styles/components/Header.css'")) {
      const cssPath = '/src/components/styles/components/Header.css';
      if (!(next as any)[cssPath]) {
        (next as any)[cssPath] = '/* autogenerated placeholder: Header styles */\n.header{ display: contents; }\n';
      }
    }

    // Generic: auto-create placeholders for missing relative imports
    const pathJoin = (baseDir: string, rel: string) => {
      const parts = (baseDir + '/' + rel).split('/')
        .filter(Boolean);
      const stack: string[] = [];
      for (const part of parts) {
        if (part === '.') continue;
        if (part === '..') { stack.pop(); continue; }
        stack.push(part);
      }
      return '/' + stack.join('/');
    };

    const candidatesFor = (p: string) => {
      // If path already has extension, try exact and index fallback
      const hasExt = /\.[a-zA-Z0-9]+$/.test(p);
      const list: string[] = [];
      if (hasExt) {
        list.push(p);
      } else {
        list.push(p + '.tsx', p + '.ts', p + '.jsx', p + '.js', p + '.css');
        list.push(p + '/index.tsx', p + '/index.ts', p + '/index.jsx', p + '/index.js');
      }
      return list;
    };

    const ensureFile = (fullPath: string) => {
      if ((next as any)[fullPath]) return;
      if (fullPath.endsWith('.css')) {
        (next as any)[fullPath] = '/* autogenerated placeholder */\n';
        return;
      }
      if (fullPath.endsWith('.tsx') || fullPath.endsWith('.jsx')) {
        (next as any)[fullPath] = "import React from 'react'\nexport default function Placeholder(){ return null }\n";
        return;
      }
      if (fullPath.endsWith('.ts')) {
        (next as any)[fullPath] = 'export {}\n';
        return;
      }
      if (fullPath.endsWith('.js')) {
        (next as any)[fullPath] = 'export default {}\n';
        return;
      }
    };

    const importRegex = /import\s+(?:[^'";]+\s+from\s+)?['\"]([^'\"]+)['\"];?|require\(\s*['\"]([^'\"]+)['\"]\s*\)/g;
    Object.entries(next).forEach(([filePath, fileContent]) => {
      const code = typeof fileContent === 'string' ? fileContent : (fileContent as any)?.code;
      if (typeof code !== 'string') return;
      if (!/\.(tsx|ts|jsx|js)$/.test(filePath)) return;
      const baseDir = filePath.split('/').slice(0, -1).join('/') || '/';
      let m: RegExpExecArray | null;
      while ((m = importRegex.exec(code))) {
        const rel = (m[1] || m[2]) as string | undefined;
        if (!rel || !(rel.startsWith('./') || rel.startsWith('../'))) continue;
        const absBase = baseDir === '/' ? '' : baseDir;
        const targetBase = pathJoin(absBase, rel);
        const options = candidatesFor(targetBase);
        const exists = options.find((opt) => (next as any)[opt]);
        if (!exists && options.length > 0) {
          ensureFile(options[0]);
        }
      }
    });
    return next;
  }, [files]);

  const handleCodeUpdate = useCallback((path: string, code: string) => {
    const nextPath = path === '/package.js' ? '/package.json' : path;
    onFilesChange(nextPath, code);
  }, [onFilesChange]);

  // Notify parent when a file is selected in the editor
  const handleFileOpen = useCallback((path: string) => {
    if (onFileSelect) {
      onFileSelect(path);
    }
  }, [onFileSelect]);

  return (
    <div className="h-full w-full p-0 m-0">
      <SandboxProvider
        template="react"
        files={normalizedFiles}
        theme={editorTheme}
        options={{
          activeFile: activeFile || '/App.js',
          recompileMode: 'immediate',
          recompileDelay: 0,
          autorun: true,
        }}
      >
        {/* Custom header matching the screenshot with eye/code tab switch */}
        <SandboxTabs defaultValue="preview" className="h-full p-0 rounded-2xl border border-[#1a1a1a] bg-[#0a0a0a] text-neutral-200 shadow-[inset_0_0_0_1px_rgba(255,255,255,0.02)]">
          {/* Top bar */}
          <div className="h-[45px] flex items-center gap-2 px-2 border-b border-[#1a1a1a] bg-[#0b0b0b]">
            {/* Left controls (double chevrons like screenshot) */}
            <div className="flex items-center gap-1 px-1">
              <button type="button" className="h-7 w-7 inline-flex items-center justify-center rounded-md text-neutral-400 hover:text-white hover:bg-white/5" aria-label="ZurÃ¼ck">
                <ChevronLeft size={16} />
              </button>
              <button type="button" className="h-7 w-7 inline-flex items-center justify-center rounded-md text-neutral-400 hover:text-white hover:bg-white/5" aria-label="Vor">
                <ChevronRight size={16} />
              </button>
            </div>

            {/* Eye / Code tab switches */}
            <div className="flex items-center">
              <div className="inline-flex h-8 items-center rounded-md border border-white/10 bg-[#141414] overflow-hidden">
                <SandboxTabsTrigger value="preview" className="h-8 w-10 p-0 rounded-none text-neutral-400 data-[state=active]:text-white data-[state=active]:bg-[#0b0b0b]">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-eye-icon lucide-eye">
                    <path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0" />
                    <circle cx="12" cy="12" r="3" />
                  </svg>
                </SandboxTabsTrigger>
                <div className="h-8 w-px bg-white/10" />
                <SandboxTabsTrigger value="code" className="h-8 w-10 p-0 rounded-none text-neutral-400 data-[state=active]:text-white data-[state=active]:bg-[#0b0b0b]">
                  <Code2 size={16} />
                </SandboxTabsTrigger>
              </div>
            </div>

            {/* Center address bar */}
            <div className="mx-2 flex-1 flex items-center justify-center">
              <div className="min-w-0 w-[720px] max-w-full h-8 flex items-center gap-2 rounded-md border border-[#222] bg-[#0e0e0e] px-2 text-xs text-neutral-300">
                <ChevronLeft size={14} className="text-neutral-500" />
                <ChevronRight size={14} className="text-neutral-500" />
                <div className="h-4 w-px bg-white/10" />
                <Monitor size={14} className="text-neutral-500" />
                <input
                  className="flex-1 bg-transparent outline-none placeholder:text-neutral-500"
                  placeholder="/"
                  value="/"
                  readOnly
                  aria-label="Pfad"
                />
                <div className="h-4 w-px bg-white/10" />
                <button type="button" title="Open in new tab" className="inline-flex h-6 w-6 items-center justify-center rounded-[6px] text-neutral-400 hover:text-white hover:bg-white/5">
                  <ExternalLink size={14} />
                </button>
                <button type="button" title="Reload" className="inline-flex h-6 w-6 items-center justify-center rounded-[6px] text-neutral-400 hover:text-white hover:bg-white/5">
                  <RotateCcw size={14} />
                </button>
              </div>
            </div>

            {/* Right controls */}
            <div className="flex items-center gap-1 px-1">
              <button type="button" className="h-7 w-7 inline-flex items-center justify-center rounded-md text-neutral-400 hover:text-white hover:bg-white/5" title="Fullscreen">
                <Maximize2 size={16} />
              </button>
              <button type="button" className="h-7 w-7 inline-flex items-center justify-center rounded-md text-neutral-400 hover:text-white hover:bg-white/5" title="More">
                <MoreVertical size={16} />
              </button>
            </div>
          </div>
          <SandboxLayout>
            <SandboxTabsContent value="preview" className="relative">
              {!previewReady && (
                <div className="absolute inset-0 z-10 grid place-items-center bg-background/40 backdrop-blur-sm">
                  <div className="flex items-center gap-2 px-3 py-2 rounded-md glass-panel">
                    <Loader size={16} />
                    <span className="text-sm text-foreground/80">Starting previewâ¦</span>
                  </div>
                </div>
              )}
              <SandboxPreview />
            </SandboxTabsContent>
            <SandboxTabsContent value="code" className="h-full w-full p-0 m-0">
              <PanelGroup direction="horizontal" className="h-full w-full p-0 m-0">
                <Panel defaultSize={25} minSize={15} className="h-full p-0 m-0">
                  <CodiconFileExplorer />
                </Panel>
                <PanelResizeHandle className="w-1 bg-border data-[resize-handle-active]:bg-primary cursor-col-resize" />
                <Panel minSize={25} className="h-full p-0 m-0">
                  <PanelGroup direction="vertical" className="h-full p-0 m-0">
                    <Panel defaultSize={70} minSize={30} className="h-full p-0 m-0">
                      <SandboxCodeEditor showTabs className="!m-0 !p-0" />
                    </Panel>
                    <PanelResizeHandle className="h-1 bg-border data-[resize-handle-active]:bg-primary cursor-row-resize" />
                    <Panel minSize={20} className="h-full glass-panel rounded-md relative p-0 m-0">
                      <TerminalPane
                        className="h-full"
                        listFiles={() => Object.keys(normalizedFiles).map((p) => ({ path: p }))}
                        readFile={(path) => {
                          const entry = (normalizedFiles as any)[path]
                          if (!entry) return undefined
                          return typeof entry === 'string' ? entry : entry.code
                        }}
                        writeFile={(path, content) => {
                          onFilesChange(path, content)
                          handleFileOpen(path)
                        }}
                        onOpenFile={(path) => {
                          handleFileOpen(path)
                        }}
                      />
                    </Panel>
                  </PanelGroup>
                </Panel>
              </PanelGroup>
            </SandboxTabsContent>
            {/* Console tab hidden for this design */}
          </SandboxLayout>
        </SandboxTabs>
      </SandboxProvider>
    </div>
  );
}
